{"ast":null,"code":"import{useEffect,useState}from\"react\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[backendBaseUrl,setBackendBaseUrl]=useState(\"\");const[longUrl,setLongUrl]=useState(\"\");const[shortUrl,setShortUrl]=useState(\"\");const[statusMessage,setStatusMessage]=useState(\"\");const[copiedMessage,setCopiedMessage]=useState(\"\");useEffect(()=>{setBackendBaseUrl(process.env.REACT_APP_BACKEND_URL);},[]);const handleShortenUrl=async()=>{setStatusMessage(\"shortening...\");setCopiedMessage(\"\");setShortUrl(\"\");if(!longUrl.trim()){setStatusMessage(\"Please enter a valid URL.\");return;}try{const response=await fetch(`${backendBaseUrl}/shorten?longurl=${encodeURIComponent(longUrl)}`,{method:\"POST\"});if(response.ok){setStatusMessage(\"\");const shortUrl=await response.text();setShortUrl(`${backendBaseUrl}/${shortUrl}`);}else{setStatusMessage(\"Error: Could not shorten URL.\");}}catch(error){console.error(error);setStatusMessage(\"Error: Unable to connect to the server.\");}};const handleCopy=()=>{navigator.clipboard.writeText(shortUrl).then(()=>setCopiedMessage(\"Copied to clipboard!\")).catch(err=>{console.error(err);setCopiedMessage(\"Failed to copy URL.\");});};return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"montserrat-heading\",children:\"URL Shortener\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-section\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Enter your long URL\",className:\"input-field roboto-body\",value:longUrl,onChange:e=>setLongUrl(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{className:\"btn roboto-body\",onClick:handleShortenUrl,children:\"Shorten\"})]}),shortUrl&&/*#__PURE__*/_jsxs(\"div\",{className:\"output-section\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"input-field roboto-body\",value:shortUrl,readOnly:true}),/*#__PURE__*/_jsx(\"button\",{className:\"btn roboto-body\",onClick:handleCopy,children:\"Copy\"})]}),statusMessage&&/*#__PURE__*/_jsx(\"p\",{className:\"roboto-body statusMessage\",children:statusMessage}),copiedMessage&&/*#__PURE__*/_jsx(\"p\",{className:\"roboto-body copiedMessage\",children:copiedMessage})]});}export default App;","map":{"version":3,"names":["useEffect","useState","jsx","_jsx","jsxs","_jsxs","App","backendBaseUrl","setBackendBaseUrl","longUrl","setLongUrl","shortUrl","setShortUrl","statusMessage","setStatusMessage","copiedMessage","setCopiedMessage","process","env","REACT_APP_BACKEND_URL","handleShortenUrl","trim","response","fetch","encodeURIComponent","method","ok","text","error","console","handleCopy","navigator","clipboard","writeText","then","catch","err","className","children","type","placeholder","value","onChange","e","target","onClick","readOnly"],"sources":["/Users/pawan/Documents/UrlShortener-Frontend/urlshortener/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [backendBaseUrl, setBackendBaseUrl] = useState(\"\");\n  const [longUrl, setLongUrl] = useState(\"\");\n  const [shortUrl, setShortUrl] = useState(\"\");\n  const [statusMessage, setStatusMessage] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(\"\");\n\n  useEffect(() => {\n    setBackendBaseUrl(process.env.REACT_APP_BACKEND_URL);\n  }, []);\n\n  const handleShortenUrl = async () => {\n    setStatusMessage(\"shortening...\");\n    setCopiedMessage(\"\");\n    setShortUrl(\"\");\n\n    if (!longUrl.trim()) {\n      setStatusMessage(\"Please enter a valid URL.\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\n        `${backendBaseUrl}/shorten?longurl=${encodeURIComponent(longUrl)}`,\n        { method: \"POST\" }\n      );\n\n      if (response.ok) {\n        setStatusMessage(\"\");\n        const shortUrl = await response.text();\n        setShortUrl(`${backendBaseUrl}/${shortUrl}`);\n      } else {\n        setStatusMessage(\"Error: Could not shorten URL.\");\n      }\n    } catch (error) {\n      console.error(error);\n      setStatusMessage(\"Error: Unable to connect to the server.\");\n    }\n  };\n\n\n  const handleCopy = () => {\n    navigator.clipboard\n      .writeText(shortUrl)\n      .then(() => setCopiedMessage(\"Copied to clipboard!\"))\n      .catch((err) => {\n        console.error(err);\n        setCopiedMessage(\"Failed to copy URL.\");\n      });\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"montserrat-heading\">URL Shortener</h1>\n\n      <div className=\"input-section\">\n        <input\n          type=\"text\"\n          placeholder=\"Enter your long URL\"\n          className=\"input-field roboto-body\"\n          value={longUrl}\n          onChange={(e) => setLongUrl(e.target.value)}\n        />\n        <button className=\"btn roboto-body\" onClick={handleShortenUrl}>\n          Shorten\n        </button>\n      </div>\n\n      {\n      shortUrl && (\n        <div className=\"output-section\">\n          <input\n            type=\"text\"\n            className=\"input-field roboto-body\"\n            value={shortUrl}\n            readOnly\n          />\n          <button className=\"btn roboto-body\" onClick={handleCopy}>\n            Copy\n          </button>\n        </div>\n      )}\n\n      {statusMessage && <p className=\"roboto-body statusMessage\">{statusMessage}</p>}\n      {copiedMessage && <p className=\"roboto-body copiedMessage\">{copiedMessage}</p>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}